<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>



<#+
   
    class DbHelper
    {
        public static List<DbTable> GetDbTables(string connectionString)
        {
           string sql=@"select 
                o.name as tableName
                ,ISNULL(ep.value,'') as remark 
                from SysObjects as o
                left join sys.extended_properties as ep on o.id=ep.major_id and minor_id=0
                Where o.XType='U'";
            DataTable dt = GetDataTable(connectionString, sql);
            return dt.Rows.Cast<DataRow>().Select(row => new DbTable
                {
                    TableName = row.Field<string>("tableName"),
                    Remark = row.Field<string>("remark")??row.Field<string>("tableName")
                    }).ToList();
        }



        public static List<DbColumn> GetDbColumns(string connectionString,string tableName)
        {
            string sql= string.Format(@"
                SELECT a.name ColName,
                (case when COLUMNPROPERTY( a.id,a.name,'IsIdentity')=1 then 1 else 0 end) IsIdentity, 
                (case when (SELECT count(*) FROM sysobjects  WHERE (name in (
                SELECT name FROM sysindexes  WHERE (id = a.id) AND (indid in  
                (SELECT indid FROM sysindexkeys  WHERE (id = a.id) AND (colid in  
                (SELECT colid FROM syscolumns WHERE (id = a.id) AND (name = a.name)))))))  
                AND (xtype = 'PK'))>0 then 1 else 0 end) IsPrimary,b.name DBColType,a.length ByteLength,  
                COLUMNPROPERTY(a.id,a.name,'PRECISION') as Length,  
                isnull(COLUMNPROPERTY(a.id,a.name,'Scale'),0) as Decimal,(case when a.isnullable=1 then '√'else '' end) IsNull,  
                isnull(e.text,'') [Default],isnull(g.[value], ' ') AS Remark
                FROM  syscolumns a 
                left join systypes b on a.xtype=b.xusertype  
                inner join sysobjects d on a.id=d.id and d.xtype='U' and d.name<>'dtproperties' 
                left join syscomments e on a.cdefault=e.id  
                left join sys.extended_properties g on a.id=g.major_id AND a.colid=g.minor_id
                left join sys.extended_properties f on d.id=f.class and f.minor_id=0
                WHERE d.NAME = '{0}' 
                order by a.id,a.colorder",tableName);
            DataTable dt = GetDataTable(connectionString, sql);
            return dt.Rows.Cast<DataRow>().Select(row => new DbColumn
                {
                    ColName = row.Field<string>("ColName"),
                    DBColType = row.Field<string>("DBColType"),
                    IsPrimary=row.Field<int>("IsPrimary"),
                    Remark = row.Field<string>("Remark")??row.Field<string>("Remark")
                    }).ToList();
        }



       
        
        public static DataTable GetDataTable(string connectionString, string commandText)
        {
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand command = connection.CreateCommand();
                command.CommandText = commandText;
                SqlDataAdapter adapter = new SqlDataAdapter(command);

                DataTable dt = new DataTable();
                adapter.Fill(dt);

                return dt;
            }
        }

    }

    class DbTable
    {
        /// <summary>
        /// 表名称
        /// </summary>
        public string TableName { get; set; }

        /// <summary>
        /// 备注
        /// </summary>
        public string Remark { get; set; }
    }

    class DbColumn
    {
        /// <summary>
        /// 列名称
        /// </summary>
        public string ColName { get; set; }

        /// <summary>
        /// 字段类型
        /// </summary>
        public string DBColType { get; set; }


        /// <summary>
        /// 是否主键
        /// </summary>
        public int IsPrimary { get; set; }

        /// <summary>
        /// 字段类型
        /// </summary>
        public string ColType {
            get
            {
                return SqlServerDbTypeMap.MapCsharpType(DBColType);
            } 
        }


        /// <summary>
        /// 备注
        /// </summary>
        public string Remark { get; set; }
    }



    #region SqlServerDbTypeMap

    public class SqlServerDbTypeMap
    {
        public static string MapCsharpType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return dbtype;
            dbtype = dbtype.ToLower();
            string csharpType = "object";
            switch (dbtype)
            {
                case "bigint": csharpType = "long"; break;
                case "binary": csharpType = "byte[]"; break;
                case "bit": csharpType = "bool"; break;
                case "char": csharpType = "string"; break;
                case "date": csharpType = "DateTime"; break;
                case "datetime": csharpType = "DateTime"; break;
                case "datetime2": csharpType = "DateTime"; break;
                case "datetimeoffset": csharpType = "DateTimeOffset"; break;
                case "decimal": csharpType = "decimal"; break;
                case "float": csharpType = "double"; break;
                case "image": csharpType = "byte[]"; break;
                case "int": csharpType = "int"; break;
                case "money": csharpType = "decimal"; break;
                case "nchar": csharpType = "string"; break;
                case "ntext": csharpType = "string"; break;
                case "numeric": csharpType = "decimal"; break;
                case "nvarchar": csharpType = "string"; break;
                case "real": csharpType = "Single"; break;
                case "smalldatetime": csharpType = "DateTime"; break;
                case "smallint": csharpType = "short"; break;
                case "smallmoney": csharpType = "decimal"; break;
                case "sql_variant": csharpType = "object"; break;
                case "sysname": csharpType = "object"; break;
                case "text": csharpType = "string"; break;
                case "time": csharpType = "TimeSpan"; break;
                case "timestamp": csharpType = "byte[]"; break;
                case "tinyint": csharpType = "byte"; break;
                case "uniqueidentifier": csharpType = "Guid"; break;
                case "varbinary": csharpType = "byte[]"; break;
                case "varchar": csharpType = "string"; break;
                case "xml": csharpType = "string"; break;
                default: csharpType = "object"; break;
            }
            return csharpType;
        }
           
        public static Type MapCommonType(string dbtype)
        {
            if (string.IsNullOrEmpty(dbtype)) return Type.Missing.GetType();
            dbtype = dbtype.ToLower();
            Type commonType = typeof(object);
            switch (dbtype)
            {
                case "bigint": commonType = typeof(long); break;
                case "binary": commonType = typeof(byte[]); break;
                case "bit": commonType = typeof(bool); break;
                case "char": commonType = typeof(string); break;
                case "date": commonType = typeof(DateTime); break;
                case "datetime": commonType = typeof(DateTime); break;
                case "datetime2": commonType = typeof(DateTime); break;
                case "datetimeoffset": commonType = typeof(DateTimeOffset); break;
                case "decimal": commonType = typeof(decimal); break;
                case "float": commonType = typeof(double); break;
                case "image": commonType = typeof(byte[]); break;
                case "int": commonType = typeof(int); break;
                case "money": commonType = typeof(decimal); break;
                case "nchar": commonType = typeof(string); break;
                case "ntext": commonType = typeof(string); break;
                case "numeric": commonType = typeof(decimal); break;
                case "nvarchar": commonType = typeof(string); break;
                case "real": commonType = typeof(Single); break;
                case "smalldatetime": commonType = typeof(DateTime); break;
                case "smallint": commonType = typeof(short); break;
                case "smallmoney": commonType = typeof(decimal); break;
                case "sql_variant": commonType = typeof(object); break;
                case "sysname": commonType = typeof(object); break;
                case "text": commonType = typeof(string); break;
                case "time": commonType = typeof(TimeSpan); break;
                case "timestamp": commonType = typeof(byte[]); break;
                case "tinyint": commonType = typeof(byte); break;
                case "uniqueidentifier": commonType = typeof(Guid); break;
                case "varbinary": commonType = typeof(byte[]); break;
                case "varchar": commonType = typeof(string); break;
                case "xml": commonType = typeof(string); break;
                default: commonType = typeof(object); break;
            }
            return commonType;
        }
    }
    #endregion


#>

